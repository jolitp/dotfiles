* headings:
* 1st heading 
** 2nd heading 
*** 3rd heading 
**** 4th heading 
***** 5th heading 
****** 6th heading 
******* 7th heading (falls back to level 6 in the tree-sitter parser)

* lists:

** unordered lists:

   - 1st item, level 1
   -- 1st item, level 2
   - 2nd item, level 1
   
   - Unordered list level 1
   -- Unordered list level 2
   --- Unordered list level 3
   ---- Unordered list level 4
   ----- Unordered list level 5
   ------ Unordered list level 6
   ------- Unordered list level 7 (falls back to level 6 in the tree-sitter parser)


   - Unordered list level 1
     This text is still part of the level 1 list item.

     this iss not part of last item?
   -- Unordered list level 2
      This text is still part of the level 2 list item.
   --- Unordered list level 3
       This text is still part of the level 3 list item.
   ---- Unordered list level 4
        This text is still part of the level 4 list item.
   ----- Unordered list level 5
         This text is still part of the level 5 list item.
   ------ Unordered list level 6
          This text is still part of the level 6 list item.
   ------- Unordered list level 7 (falls back to level 6 in the tree-sitter parser)
           This text is still part of the level 7 list item.

** ordered lists:

   Ordered lists are not made with ordered numbers. Neorg counts items automatically.

   how to show the numbers though?

    ~ Ordered list level 1
    ~~ Ordered list level 2
    ~~~ Ordered list level 3
    ~~~~ Ordered list level 4
    ~~~~~ Ordered list level 5
    ~~~~~~ Ordered list level 6
    ~~~~~~~ Ordered list level 7 (falls back to level 6 in the tree-sitter parser)

    ~ Ordered list level 1
      This text is still part of the level 1 list item.
    ~~ Ordered list level 2
       This text is still part of the level 2 list item.
    ~~~ Ordered list level 3
        This text is still part of the level 3 list item.
    ~~~~ Ordered list level 4
         This text is still part of the level 4 list item.
    ~~~~~ Ordered list level 5
          This text is still part of the level 5 list item.
    ~~~~~~ Ordered list level 6
           This text is still part of the level 6 list item.
    ~~~~~~~ Ordered list level 7 (falls back to level 6 in the tree-sitter parser)
            This text is still part of the level 7 list item.

** Quotes

   > Quote level 1
   >> Quote level 2
   >>> Quote level 3
   >>>> Quote level 4
   >>>>> Quote level 5
   >>>>>> Quote level 6
   >>>>>>> Quote level 7 (falls back to level 6 in the tree-sitter parser)

   > Quote level 1
     This text is still part of the level 1 quote.
   >> Quote level 2
      This text is still part of the level 2 quote.
   >>> Quote level 3
       This text is still part of the level 3 quote.
   >>>> Quote level 4
        This text is still part of the level 4 quote.
   >>>>> Quote level 5
         This text is still part of the level 5 quote.
   >>>>>> Quote level 6
          This text is still part of the level 6 quote.
   >>>>>>> Quote level 7 (falls back to level 6 in the tree-sitter parser)
           This text is still part of the level 7 quote.

* Definitions:
  Definitions are primarily of use to people who write technical documents.
  They consist of a term, and then are followed by a definition of that term.

  $ Term
  Definition content.

  $$ Term
  Content of the definition.

  Which scans up to the closing modifier.
  $$

* Footnotes
  Footnotes allow the user to give supplementary information related to some text without
  polluting the paragraph itself. Footnotes can be linked to using {# linkables}.

  ^ Single Footnote
  Optional footnote content.

  To create longer footnotes, use the ranged term instead:
  ^^ Ranged Footnote
  Content of the footnote.

  Which scans up to the closing modifier.
  ^^

* Variables [?]
  Variables are bits of information that can be dynamically inserted into the document.

  & Variable Name1
  Variable value

  && Variable Name2
  *this* is some /content/.
  &&

  After being defined a single time, it can be inserted into paragraphs using the `&` attached
  modifier:

  The content of the above variable is: &Variable Name1&.

  After the logical detached modifiers are evaluated, the above example would expand to:

  The content of the above variable is: *this* is some /content/.


* Table Cells
  Table cells are used to, well, build up a table. Here are a few examples of table cells:

  : A1
    Content of table cell at `A1`.
  :: A2
  > Content of table cell at `A2` (in a quote).
  ::

  : A1 : Content of table cell at `A1`.


* Weak Delimiting Modifier


* Heading level 1
  Text under first level heading.

** Heading level 2
   Text under second level heading.
   ---

  Text under first level heading again.

* Strong Delimiting Modifier

This modifier uses the `=` character and immediately closes all heading levels.

* Heading level 1
  Text under first level heading.

** Heading level 2
   Text under second level heading.
   ===

Text belonging to no heading level (i.e. to the document's root).

* Horizontal Rule

This modifier uses the `_` character and simply renders a horizontal line. It does _NOT_
affect the heading level but immediately terminates a {# paragraphs}[paragraph].

* Heading level 1
  Text under first level heading.
  ___
  This is a new paragraph separated from the previous one by a horizontal line.
  This text still belongs to the first level heading.

* TODOs
  I cannot make todos like in org...?


** Carryover Tags
*** Weak Carryover Tags
     - List item 1
     +color red
     - List item 2
     - List item 3


     +color red
     * Heading 1
       This is some content.
     ** Heading 2
        This is also some content.


    - List item 1
    +color red
    - List item 2
    -- This isn't red
    -- Neither is this
    +color green
    - ::
      This is green.

      -- This is also green
      -- And so is this.
      ---

*** Strong Carryover Tags

     What is your favourite activity? Hint: there's only one correct answer :)
     #choice
     - ( ) Sleeping
     - ( ) Learning
     - (x) Writing `.norg` documents


     #color red
     * Heading 1
       This is some content.
     ** Heading 2
        This is also some content.

** Ranged Tags

*** Standard Ranged Tags

|example
* This is an example heading.
|end


|comment
This is a very long comment with some content
and with some markup!

* Heading
  /italic/ and *bold*.
|end


|details
* Here is some hidden markup!
  Wowzers.
|end


*** Verbatim Ranged Tags

@code java
public class TheClass {
  // ...
}
@end

* Attached Modifiers
  The following attached modifiers exist and have respective meaning:
  - \*bold\*: *bold*
  - \/italic\/: /italic/
  - \_underline\_: _underline_
  - \-strikethrough\-: -strikethrough-
  - \!spoiler\!: !spoiler!
  - \^superscript\^: ^superscript^ (cannot be nested into `subscript`)
  - \,subscript\,: ,subscript, (cannot be nested into `superscript`)
  - \`inline code\`: `inline code` (disables any nested markup - verbatim)
  - \%inline comment\%: %inline comment%
  - \$inline math\$: $f(x) = y$ (verbatim)
  - \&variable\&: &variable& (verbatim)


   */Bold and italic/* <- closing modifiers closed in the opposite order they were opened
   */Bold and italic/ and only bold*

   Text */with/ _different_ ^markup^ !types!*

** Free-form Attached Modifiers

   Here, I can write `| leading and trailing whitespace (with a ` char)  |` within a verbatim block
   without accidentally terminating it.

   Here, I can use a literal `$` inside of inline math: $| 10$ + 10$ = 20$ |$.

   The | (pipe character) goes in the inner portion

** Link Modifier

abso:/freaking/:lutely!

Ex:*ample* text

** Attached Modifier Extensions

`print("This is some python")`(lang:python) <- The lang:python attribute highlights the text as python

*print("This is some python too")*(lang:python) <- Yes, this is Norg markup highlighted as python.
                                              Don't know why you'd do it but hey you do you.
                                              %TODO: can attributes impose limits?%

{* Link location}[this is an important link](important|color:red) <- Highlights the link as big,
                                                                         bold (important) and red.


* Intersection Modifiers

  from this:

$ Term
  This is a definition of that term.

to this:

$ Term : This is a definition of that term.

  ...? one liners? is this wrong?

This syntax is especially favoured for table cells %TODO: link%:

: A1 : Content of the cell at A1
: A2 : Content of the cell at A2


: A1
Content of the cell at A1
: A2
Content of the cell at A2


* Trailing Modifier
** Line Continuation

* I am a very long heading title~
  which did not end here because of the trailing modifier


   - I am a list item~

   - And I am still the same list

* Linkables

** Link Location

*** File Location

    {:path/to/other-file:} 

    {:path/to/file:# Location within that file}
    {:path/to/file:** Level 2 heading}

*** URL

    {https://github.com/nvim-neorg/neorg}

*** Line Number

    Line 1
    Line 2

    This is a reference to line {2}.
    This is a reference to line {:file:4} in a different file.

*** Detached Modifier

    * I am a level 1 heading

    Strict link to a level 1 heading:
    {* I am a level 1 heading}

*** Custom Detached Modifiers
      
**** The File Linkable (`/`)

     {/ my-file.txt:123} <- This is a link to `my-file.txt` at line 123

     {/ my-file.txt:* header} <- This is a link to `my-file.txt` at * Header [???]

**** Timestamps (`@`)

     Frank's birthday is on {@ Mon 5th May}.

**** The Magic Char (`#`)
    
     {# inline linkables}[inline
     linkable]

      goes nowhere?

**** Wiki Links (`?`)
     The *wiki link* allows you to link to any heading in any file in the current workspace. 
     You don't specify any filepaths within the link, just the title of the heading you want to search for.

     Cats are {? mammals}, they make for great {? house pets} too!

***** Additional Behaviours With `{:file:}`

      The wiki link can also be used with the `{:file:}` to limit the search. It can actually double
      as a "heading catchall" operator as mentioned in the previous section - it will match all
      headings regardless of nesting level in the file provided.

** Anchors
   [Neorg] is a fancy organizational tool for everyone.

   I like shilling [Neorg]{https://github.com/nvim-neorg/neorg} sorry :(

** Inline Link Targets

   One thing to mention is <inline link targets> - they allow you to link to any location in a
   document.

   ...

   Refer to {# inline link targets} if you are interested in learning more.











